import java.io.*;
import com.datamelt.db.Project;
import com.datamelt.db.RuleGroup;
import com.datamelt.db.RuleGroupTestData;
import com.datamelt.util.RuleGroupTestDataChecker;
import com.datamelt.db.Field;
import com.datamelt.util.RuleGroupFileCreator;
import java.text.SimpleDateFormat;
import java.text.ParseException;
import com.datamelt.rules.engine.BusinessRulesEngine;
import com.datamelt.rules.core.RuleExecutionCollection;
import com.datamelt.util.RowFieldCollection;
import com.datamelt.util.RowField;
import java.util.zip.ZipFile;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

cancelled= request.getParameter("submit");

if(user==null)
{
	templatename="login.vm";
}
else
{
	id=Long.parseLong(request.getParameter("id"));
	rulegroupid=Long.parseLong(request.getParameter("rulegroupid"));
	selecteddate=request.getParameter("selecteddate");
	long testdataId = -1;
	if(request.getParameter("testdataid")!=null)
	{
		testdataId=Long.parseLong(request.getParameter("testdataid"));
	}

	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	
	Project project = new Project();
    project.setConnection(connection);
    project.setId(id);
    project.load();
    project.loadFields();
    
    RuleGroup rulegroup = new RuleGroup();
    rulegroup.setConnection(connection);
    rulegroup.setId(rulegroupid);
    rulegroup.load();
    rulegroup.loadRuleSubgroups();
	rulegroup.loadRuleGroupActions();

	if(cancelled!=null && cancelled.equals("test"))
	{
		context.put("testrun",true);
		
		SimpleDateFormat dateformat = new SimpleDateFormat("yyyy-MM-dd");
		SimpleDateFormat datetimeformat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String realPath = request.getSession().getServletContext().getRealPath("/");
     	if(id >0)
     	{
			RuleGroupFileCreator fileCreator = new RuleGroupFileCreator();
		
			fileCreator.projectName = project.name;
			fileCreator.templatePath = realPath + "template";
			fileCreator.outputPath = realPath + "tmp";
			fileCreator.temporaryPath = contextpath + "tmp";
			fileCreator.selectedDate = selecteddate;
			
			project.loadRuleGroup(rulegroupid);
			
			// contains all the field from actions that shall be updated
			Set fieldsToUpdate = rulegroup.getReferencedFieldsToUpdate();
			
			String tempPath = fileCreator.writeFiles(project);
			String fileName = fileCreator.zipFiles(project, tempPath);

			BusinessRulesEngine ruleEngine = new BusinessRulesEngine(new ZipFile(fileName));

            int numberOfColumns = rulegroup.referencedFields.size();
	        RowFieldCollection rowFieldCollection = new RowFieldCollection();
	        context.put("row",rowFieldCollection);
	        
	        int error=0;
	        String errorField="";

	    	RuleGroupTestData testData = new RuleGroupTestData();
		    testData.setConnection(connection);
		    testData.ruleGroupId = rulegroup.id;
		    testData.user.id = user.id;

			Map keyValuePairs; 
	    	if(testdataId>-1)
	    	{
				testData.setId(testdataId);
				testData.load();
				keyValuePairs = testData.getKeyValuePairs();  	
	    	}
	    	else
	    	{
	    		keyValuePairs = new HashMap(); 
	    	}
         
	        for(int i=0;i< project.fields.size();i++)
		    {
		    	Field field = project.fields.get(i);
		    	String value;
		    	if(testdataId==-1)
		    	{
		    		value = request.getParameter("field_" + field.id);
		    		if(rulegroup.referencedFields.contains(field.name))
		    		{
		    			keyValuePairs.put(field.name, value);
		    		}
		    	}
		    	else
		    	{
		    		value = testData.getKeyValuePair(field.name);
		    		
		    		if(value!=null && value.toLowerCase().trim().equals("null"))
		    		{
		    			value = null;
		    		}
		    	}
		    	
		    	//if(value!=null || fieldsToUpdate.contains(field.name))
		    	//{
					field.testValue = value;
			    	if(field.type.name.equals("date"))
			    	{
			    		try
			    		{
			    			if(value!=null && value!="")
			    			{
			    				try
			    				{
			    					Date date = datetimeformat.parse (value); 
			    					rowFieldCollection.addField(new RowField(field.name,date));
			    				}
			    				catch(Exception parseexception)
			    				{
			    					Date date = dateformat.parse (value); 
			    					rowFieldCollection.addField(new RowField(field.name,date));
			    				}
			    			}
			    			else
			    			{
			    				rowFieldCollection.addField(new RowField(field.name,null));
			    			}
			    		}
			    		catch(Exception ex)
			    		{
			    			errorField = field.name + "value=[" + value + "] (date conversion)";
			    			error = 1; 
			    		}
			    	}
			    	else if(field.type.name.equals("integer") )
			    	{
			    		try
			    		{
			    			if(value!=null && value!="")
			    			{
			    				rowFieldCollection.addField(new RowField(field.name,Integer.parseInt(value)));
			    			}
			    			else
			    			{
			    				rowFieldCollection.addField(new RowField(field.name,null));
			    			}
			    		}
			    		catch(Exception ex)
			    		{
			    			errorField = "[" + field.name + "], value=[" + value + "] (integer conversion)";
			    			error = 1;
			    		}
			    	}
			    	else if(field.type.name.equals("boolean"))
			    	{
			    		try
			    		{
			    			if(value!=null && value!="")
			    			{
			    				rowFieldCollection.addField(new RowField(field.name,Boolean.parseBoolean(value)));
			    			}
			    			else
			    			{
			    				rowFieldCollection.addField(new RowField(field.name,null));
			    			}
			    		}
			    		catch(Exception ex)
			    		{
			    			errorField = "[" + field.name + "], value=[" + value + "] (boolean conversion)";
			    			error = 1;
			    		}
			    	}
			    	else if(field.type.name.equals("long"))
			    	{
			    		try
			    		{
			    			if(value!=null && value!="")
			    			{
			    				rowFieldCollection.addField(new RowField(field.name,Long.parseLong(value)));
			    			}
			    			else
			    			{
			    				rowFieldCollection.addField(new RowField(field.name,null));
			    			}
			    		}
			    		catch(Exception ex)
			    		{
			    			errorField = "[" + field.name + "], value=[" + value + "] (long conversion)";
			    			error = 1;
			    		}
			    	}
			    	else if(field.type.name.equals("float"))
			    	{
			    		try
			    		{
			    			if(value!=null && value!="")
			    			{
			    				rowFieldCollection.addField(new RowField(field.name,Float.parseFloat(value)));
			    			}
			    			else
			    			{
			    				rowFieldCollection.addField(new RowField(field.name,null));
			    			}
			    		}
			    		catch(Exception ex)
			    		{
			    			errorField = "[" + field.name + "], value=[" + value + "] (float conversion)";
			    			error = 1;
			    		}
			    	}
			    	else if(field.type.name.equals("double"))
			    	{
						try
						{
							if(value!=null && value!="")
							{
			    				rowFieldCollection.addField(new RowField(field.name,Double.parseDouble(value)));
			    			}
			    			else
			    			{
			    				rowFieldCollection.addField(new RowField(field.name,null));
			    			}
			    		}
			    		catch(Exception ex)
			    		{
			    			errorField = "[" + field.name + "], value=[" + value + "] (double conversion)";
			    			error = 1;
			    		}
			    	}
			    	else
			    	{
			    		try
			    		{
			    			if(value!=null)
			    			{
			    				rowFieldCollection.addField(new RowField(field.name,value));
			    			}
			    			else
			    			{
			    				rowFieldCollection.addField(new RowField(field.name,null));
			    			}
			    		}
			    		catch(Exception ex)
			    		{
			    			errorField = "[" + field.name + "], value=[" + value + "] (string conversion)";
			    			error = 1;
			    		}
			    	}
		    	//}
		    }
		    
			ArrayList existingTestData = DbCollections.getAllRuleGroupTestData(connection, rulegroup.id, user.id);
			RuleGroupTestDataChecker testDataChecker = new RuleGroupTestDataChecker();
			boolean equalTestData = testDataChecker.compareTestData(keyValuePairs,existingTestData);
			
			if(!equalTestData)
			{
				testData.keyValuePairs = keyValuePairs;
	    		testData.insert(connection.getPreparedStatement(RuleGroupTestData.INSERT_SQL));
	    	}
		    
		    
			if(error==0)
			{
				int rowFailed=0;
				if(rulegroup.numberOfRules == 0)
				{
					rowFailed = 2;
				}
		        try
				{
		        	ruleEngine.run("row: " + counter, rowFieldCollection);
					RuleExecutionCollection results = ruleEngine.getRuleExecutionCollection();
					context.put("results",results);
					
					if(ruleEngine.getNumberOfGroupsFailed()>0)
	    	    	{
	        			rowFailed = 1;
	        			
	        		}
	        		context.put("rulegroupfailed",rowFailed);
				}
				catch(Exception ex)
				{
					infomessage.type="error";
					infomessage.text="error running the rule engine" + ex.toString();
				}
	        	if(ruleEngine.getNumberOfGroupsFailed()>0)
	        	{
	        		rowFieldCollection.setRowFailed(true);
	        	}
			}
			else
			{
				infomessage.type="error";
				infomessage.text="An error occurred processing the test values for the field: " + errorField;
			}
		}
	}
	ArrayList groups = DbCollections.getAllRuleSubgroups(connection,rulegroupId);
	context.put("rulesubgroups",groups);
	ArrayList actions = DbCollections.getAllRuleGroupActions(connection,rulegroupId);
	context.put("rulegroupactions",actions);
	context.put("project",project);
	context.put("rulegroup",rulegroup);
	context.put("usedfields",rulegroup.getReferencedFields());
	templatename="listrulesubgroups.vm";
}
