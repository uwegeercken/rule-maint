import com.datamelt.db.Project;
import com.datamelt.db.Activity;
import com.datamelt.db.User;
import java.util.zip.ZipFile;
import javax.servlet.http.Part;
import java.io.File;

cancelled= request.getParameter("submit");

if(user==null)
{
	templatename="login.vm";
}
else
{
	if(cancelled!=null && cancelled.equals("import"))
	{
		name=request.getParameter("name");
		description=request.getParameter("description");
		objectclassname=request.getParameter("objectclassname");
		objectmethodgetter = request.getParameter("objectmethodgetter");
		objectmethodsetter = request.getParameter("objectmethodsetter");
		projectgroupid=Integer.parseInt(request.getParameter("projectgroupid"));
		if(request.getParameter("isprivate")!=null)
		{
			isprivate=1;
		}
		else
		{
			isprivate=0;
		}
		Part filePart;
		filePart = request.getPart("zipfile");
		String fileName;
		String contentDisp = filePart.getHeader("content-disposition");
    	String[] items = contentDisp.split(";");
    	for (int i=0;i<items.length;i++) 
    	{	
    		String s = items[i];
        	if (s.trim().startsWith("filename")) 
        	{
            	fileName= s.substring(s.indexOf("=") + 2, s.length()-1);
        	}
    	}
		String zipfile= uploadspath + "/" + fileName;

		Project project = new Project();
		project.setConnection(connection);
		
		if(!project.exist(name) && name.length()>0 && fileName!=null && !fileName.equals("") && projectgroupid>0)
		{
			project.setName(name);
			project.setDescription(description);
			project.setPrivateProject(isprivate);
			project.lastUpdateUser.id = user.id;
			project.ownerUser.id = user.id;
			project.group.id = projectgroupid;
			project.objectClassname = objectclassname;
			project.objectMethodGetter = objectmethodgetter;
			project.objectMethodSetter = objectmethodsetter;
			
			ZipFile z=null;
			File f = new File(zipfile);
			try
			{
				filePart.write(zipfile);
				z = new ZipFile(zipfile);
				project.insert(connection.getPreparedStatement(Project.INSERT_SQL),user);
				project.importProject(z, user);
				infomessage.text="Project added - reference fields, rulegroups, subgroups, rules and actions imported";
				
				f.delete();
				
				Activity activity = new Activity();
				activity.connection = connection;
				activity.user = user;
				activity.message = "Imported file [" + fileName + "] into project [" + project.name +"]";
				activity.insert(connection.getPreparedStatement(Activity.INSERT_SQL));
				
			}
			catch(FileNotFoundException fnfe)
			{
				infomessage.type="error";
				infomessage.text="File not found : " + zipfile;
			
			}
			catch(Exception ex)
			{
				infomessage.type="error";
				infomessage.text="File can not be accessed or read or is not a valid zip file: " + zipfile;
				try
				{
					f.delete();
				}
				catch (Exception ex)
				{}
			}
			finally
			{
				try
				{	
					f.delete();
				}
				catch (Exception ex)
				{}
			}
		}
		else if(project.exist(name) && name.length()>0)
		{
			project.setName(name);
			project.setDescription(description);
			project.setPrivateProject(isprivate);
			project.group.id = projectgroupid;
			project.objectClassname = objectclassname;
			project.objectMethodGetter = objectmethodgetter;
			project.objectMethodSetter = objectmethodsetter;
			infomessage.type="error";
			infomessage.text="Project with the same name already exists.";
		}
		else if(fileName==null || fileName.equals(""))
		{
			project.setName(name);
			project.setDescription(description);
			project.setPrivateProject(isprivate);
			project.group.id = projectgroupid;
			project.objectClassname = objectclassname;
			project.objectMethodGetter = objectmethodgetter;
			project.objectMethodSetter = objectmethodsetter;
			infomessage.type="error";
			infomessage.text="Project Zip file must be specified.";
		}
		else if(name==null || name.trim().length()==0)
		{
			project.setName(name);
			project.setDescription(description);
			project.setPrivateProject(isprivate);
			project.group.id = projectgroupid;
			project.objectClassname = objectclassname;
			project.objectMethodGetter = objectmethodgetter;
			project.objectMethodSetter = objectmethodsetter;
			infomessage.type="error";
			infomessage.text="Project name must be specified.";
		}
		else if(projectgroupid==0)
		{
			project.setName(name);
			project.setDescription(description);
			project.setPrivateProject(isprivate);
			project.objectClassname = objectclassname;
			project.objectMethodGetter = objectmethodgetter;
			project.objectMethodSetter = objectmethodsetter;
			infomessage.type="error";
			infomessage.text="Owner group must be specified.";
		}

		context.put("project",project);
	}
	
	ArrayList list = DbCollections.getAllGroups(connection, user);
	context.put("groups",list);
	
	templatename="importfile.vm";
}