import java.io.*;
import com.datamelt.db.Project;
import com.datamelt.db.Activity;
import com.datamelt.util.RuleGroupFileCreator;
import com.datamelt.util.ReferenceFieldsFileCreator;
import com.datamelt.util.FileUtility;
import java.text.SimpleDateFormat;
import java.text.ParseException;
import java.io.FileInputStream;
import java.util.Properties;

cancelled= request.getParameter("submit");

if(user==null)
{
	templatename="login.vm";
}
else
{
	templatename="sendfile.vm";
	if(cancelled!=null && cancelled.equals("generate"))
	{
		FileInputStream fis = new FileInputStream(contextpath + "/" + configfile);
		Properties configuration = new Properties();
		configuration.load(fis);
		fis.close();
		context.put("configuration",configuration);
			
		String exportpath = configuration.getProperty("export_path");
		String backuppath = configuration.getProperty("backup_path");
			
		id=Long.parseLong(request.getParameter("id"));
		selecteddate=request.getParameter("selecteddate");
		environment=request.getParameter("environment");
		context.put("environment",environment);
		
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		
		boolean validselecteddate = false;
		try
		{
        	sdf.parse(selecteddate);
        	validselecteddate = true;
     	}
     	catch(ParseException e)
     	{
         	validselecteddate = false;
     	}
     	
     	Project project = new Project();
     	if(id >0)
     	{
		    project.setConnection(connection);
		    project.setId(id);
		    project.load();
		    project.loadRuleGroups(selecteddate);
		}
     	context.put("selectedproject",project);
     	
     	if(project.exportFilename!=null && !project.exportFilename.equals(""))
		{
			exportFilename = project.exportFilename;			
		}
		else
		{
			exportFilename = project.name;
		}
		
     	if(validselecteddate && id >0)
     	{
			Activity activity = new Activity();
			activity.connection = connection;
			activity.user = user;
			
			RuleGroupFileCreator fileCreator = new RuleGroupFileCreator();
		
			fileCreator.projectName = exportFilename;
			fileCreator.templatePath = contextpath + "template";
			fileCreator.environment = environment;
			fileCreator.temporaryPath = contextpath + "tmp";
			fileCreator.selectedDate = selecteddate;
			
			if(exportpath!=null && !exportpath.trim().equals(""))
			{
				fileCreator.outputPath = exportpath;
				
				if(backuppath!=null && !backuppath.trim().equals(""))
				{
					fileCreator.backupPath = backuppath;
				}
				FileUtility.backupFile(fileCreator.outputPath, fileCreator.getZipFileName(project),fileCreator.backupPath); 
				String tempPath = fileCreator.writeFiles(project);

				ReferenceFieldsFileCreator referenceFieldFileCreator = new ReferenceFieldsFileCreator(project,fileCreator.temporaryPath,fileCreator.templatePath, RuleGroupFileCreator.TEMPLATE_REFERENCEFIELDS);
				referenceFieldFileCreator.writeFile();
				
				String fileName = fileCreator.zipFiles(project, tempPath);
				
				// create a project file copy for the development environment
				if(environment.equals(RuleGroupFileCreator.ENVIRONMENT_PRODUCTION))
				{
					fileCreator.environment = RuleGroupFileCreator.ENVIRONMENT_DEVELOPMENT;
					FileUtility.backupFile(fileCreator.outputPath, fileCreator.getZipFileName(project),fileCreator.backupPath);
					//FileUtility.copyFile(fileName,fileCreator.getZipFileName(project));
					String tempPath2=fileCreator.writeFiles(project);
					
					fileCreator.zipFiles(project, tempPath2);
				}
				
				activity.message = "Exported project [" + project.name + "] to [" + fileName + "], environment [" + environment + "], with validity date [" + selecteddate + "]";
				activity.insert(connection.getPreparedStatement(Activity.INSERT_SQL));
				
				infomessage.type="info";
				infomessage.text="Project exported to file: [" + fileName + "]";
			}
			else
			{
				String tempPath = fileCreator.writeFiles(project);
				
				ReferenceFieldsFileCreator referenceFieldFileCreator = new ReferenceFieldsFileCreator(project,fileCreator.temporaryPath,fileCreator.templatePath, RuleGroupFileCreator.TEMPLATE_REFERENCEFIELDS);
				referenceFieldFileCreator.writeFile();
				
				String fileName = fileCreator.zipFiles(project, tempPath);
				
				activity.message = "Exported project [" + project.name + "], environment [" + environment + "], with validity date [" + selecteddate + "]";
				activity.insert(connection.getPreparedStatement(Activity.INSERT_SQL));
				
				response.setContentType("application/zip");  
			    response.setHeader("Content-Disposition","attachment;filename=\"" + exportFilename +  "_" + environment + ".zip\"");
				
				File f = new File(fileName);  
			    FileInputStream is = new FileInputStream(f);  
			    
				int c;
            	try 
            	{
	            	while ((c = is.read()) != -1) 
	            	{
	            		response.getWriter().write(c);
	            	}
	            }
	            finally
	            {
                	if (inputStream != null)
                	{
                		is.close();
                	}
                	response.getWriter().close();
                }
			}
		}
		else if(id==0 || validselecteddate==false)
		{
			infomessage.type="error";
			infomessage.text="Select a Project and specify a valid Validity Date";
		}
		else
		{
			infomessage.type="error";
			infomessage.text="An unknown error occurred";
		}
		
		if(validselecteddate)
		{
			context.put("today",selecteddate);
		}
		
		ArrayList list = DbCollections.getAllProjects(connection,user);
		context.put("projects",list);
		
	}
	
}